# 2. Проверить на совместность и выяснить, сколько решений будет иметь система линейных уравнений:
# а)
# ⎧ 3x1−x2+x3=4
# ⎨ 2x1−5x2−3x3=−17
# ⎩ x1+x2−x3=0
# б)
# ⎧ 2x1−4x2+6x3=1
# ⎨ x1−2x2+3x3=−2
# ⎩ 3x1−6x2+9x3=5
# в)
# ⎧ x1+2x2+5x3=4
# ⎩ 3x1+x2−8x3=−2
# Невырожденная матрица  ― квадратная матрица, определитель которой отличен от нуля.
# В случае, когда число уравнений равно числу неизвестных и матрица коэффициентов невырождена,
# если векторы столбцов коэффициентов a1,a2,...,an линейно независимы, то такая система совместна
# В общем случае это означает, что когда векторы столбцов коэффициентов a1,a2,...,an линейно зависимы,
# они образуют некоторое линейное подпространство размерности меньше, чем n, и такая система совместна
# только в случае, когда вектор b принадлежит этому линейному подпространству. В этом случае система
# имеет бесконечное число решений.

import numpy as np

print('a)')
A = np.array([[3, -1, 1], [2, -5, -3], [1, 1, -1]])
B = np.array([4, -17, 0])
r = np.linalg.matrix_rank(A.T)

if np.linalg.det(A) != 0 and r == A.shape[0] == A.shape[1]:
    print('Система совместна')
    x = np.linalg.solve(A, B)
    print('Система линейных уравнений имеет', len(x), 'решения')
elif np.linalg.det(A) != 0 or A.shape[0] != A.shape[1]:
    print('Система несовместна, поскольку матрица невырожденная')
elif r != A.shape[1]:
    print('Система несовместна, поскольку вектора столбцов коэффициентов линейно зависимы')

print('б)')
A = np.array([[2, -4, 6], [1, -2, 3], [3, -6, 9]])
B = np.array([1, -2, 5])
r = np.linalg.matrix_rank(A.T)

if np.linalg.det(A) != 0 and r == A.shape[0] == A.shape[1]:
    print('Система совместна')
elif np.linalg.det(A) != 0 or A.shape[0] != A.shape[1]:
    print('Система несовместна, поскольку матрица невырожденная')
elif r != A.shape[1]:
    print('Система несовместна, поскольку вектора столбцов коэффициентов линейно зависимы')

print('в)')
A = np.array([[1, 2, 5], [3, 1, -8]])
B = np.array([4, -2])

if A.shape[0] != A.shape[1]:
    print('Система несовместна, поскольку матрица невырожденная')
